/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.controller.CursoController;
import br.com.ifba.curso.entity.Curso;
import jakarta.annotation.PostConstruct;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author crisl
 */
@Component
public class CursoLista extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    @Autowired
    private CursoController controller;
            
    public CursoLista() {
        initComponents();
        
    }
    
     @PostConstruct
    public void inicializarDepoisDoSpring() {
        carregarTabela();
        adicionarIconesNasColunas();
        configurarRenderizadoresDeIcones();
        adicionarListenerTabela();
    }

    

    
    // metados adicinado ns colunas remover e editar
    void adicionarIconesNasColunas() {
        DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.setValueAt(new ImageIcon(getClass().getResource("/br/com/ifba/imagens/remover.png.png")), i, 4);
            modelo.setValueAt(new ImageIcon(getClass().getResource("/br/com/ifba/imagens/editar.png.png")), i, 5);
        }
    }
    
    // metodo para adicionar listener que detecta clique nas colunas
    private void adicionarListenerTabela() {
        tabCurso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int linha = tabCurso.rowAtPoint(evt.getPoint());
                int coluna = tabCurso.columnAtPoint(evt.getPoint());

                if (coluna == 4) { // REMOVER
                    int confirmacao = JOptionPane.showConfirmDialog(null, "deseja excluir esse curso?", "confirmacao", JOptionPane.YES_NO_OPTION);
                    if (confirmacao == JOptionPane.YES_OPTION) {
                        ((DefaultTableModel) tabCurso.getModel()).removeRow(linha);
                        
                        // excluir o curso do banco de dados
                           DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
                            Long id = (Long) modelo.getValueAt(linha, 5); 
                            Curso curso = controller.buscarPorId(id);
                            controller.excluirCurso(curso);
                            carregarTabela();
                        JOptionPane.showMessageDialog(null, "o curso foi excluido");
                    }
                } else if (coluna == 5) { // EDITAR
                    
                    String nome = tabCurso.getValueAt(linha, 0).toString();
                    int  duracao = Integer.parseInt(tabCurso.getValueAt(linha, 1).toString());
                    String descricao = tabCurso.getValueAt(linha, 2).toString();
                    String plataforma = tabCurso.getValueAt(linha, 3).toString();
                    
                   EditarCurso telaEdicao = new EditarCurso(CursoLista.this, linha, nome, duracao, descricao, plataforma);
                   telaEdicao.setVisible(true);
                }
            }
        });
    
    }
    
    // metodo para configurar os icones nas coluna da tabela
    private void configurarRenderizadoresDeIcones() {
        
    // configurando a coluna de remover
    tabCurso.getColumnModel().getColumn(4).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
        @Override
        public void setValue(Object value) {
            if (value instanceof ImageIcon imageIcon) {
                setIcon(imageIcon);
                setText("");
            } else {
                setIcon(null);
                setText("");
            }
        }
    });

    // configurando a coluna de editar
    tabCurso.getColumnModel().getColumn(5).setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
        @Override
        public void setValue(Object value) {
            if (value instanceof ImageIcon imageIcon) {
                setIcon(imageIcon);
                setText("");
            } else {
                setIcon(null);
                setText("");
            }
        }
    });
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelSuperior = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        txtButao = new javax.swing.JButton();
        lblHomemCrem = new javax.swing.JLabel();
        tabelaCurso = new javax.swing.JScrollPane();
        tabCurso = new javax.swing.JTable();
        btnNovoCurso = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lista de Cursos");

        painelSuperior.setBackground(new java.awt.Color(255, 102, 102));

        txtBuscar.setForeground(new java.awt.Color(0, 0, 0));
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        txtButao.setForeground(new java.awt.Color(0, 0, 0));
        txtButao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/imagens/pesquisa-de-lupa (1).png"))); // NOI18N
        txtButao.setText("Buscar...");
        txtButao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtButaoActionPerformed(evt);
            }
        });

        lblHomemCrem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/imagens/perfil-de-usuario.png"))); // NOI18N

        tabelaCurso.setBackground(new java.awt.Color(255, 204, 204));
        tabelaCurso.setBorder(new javax.swing.border.MatteBorder(null));
        tabelaCurso.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabelaCurso.setFont(new java.awt.Font("Century Schoolbook", 1, 12)); // NOI18N

        tabCurso.setBackground(new java.awt.Color(255, 204, 204));
        tabCurso.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        tabCurso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "CURSO", "DURACAO", "DESCRICAO", "PLATAFORMA", "REMOVER", "EDITAR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCurso.setViewportView(tabCurso);

        btnNovoCurso.setText("Adicionar");
        btnNovoCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoCursoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelSuperiorLayout = new javax.swing.GroupLayout(painelSuperior);
        painelSuperior.setLayout(painelSuperiorLayout);
        painelSuperiorLayout.setHorizontalGroup(
            painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSuperiorLayout.createSequentialGroup()
                .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(tabelaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblHomemCrem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnNovoCurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtButao)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        painelSuperiorLayout.setVerticalGroup(
            painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelSuperiorLayout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtButao)
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblHomemCrem, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(btnNovoCurso))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabelaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(195, 195, 195))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(painelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // botao com os seus comandos
    private void txtButaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtButaoActionPerformed
        
    String textoBusca = txtBuscar.getText().toLowerCase(); // texto digitado na busca
    DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
    modelo.setRowCount(0); // limpa a tabela antes de filtrar

    List<Curso> cursos = controller.listarTodos();

for (Curso curso : cursos) {
    if (curso.getNome().toLowerCase().contains(textoBusca) ||
        curso.getDescricao().toLowerCase().contains(textoBusca) ||
        curso.getPlataforma().toLowerCase().contains(textoBusca)) {

        modelo.addRow(new Object[]{
            curso.getNome(),
            curso.getDuracao(),
            curso.getDescricao(),
            curso.getPlataforma(),
            new ImageIcon(getClass().getResource("/br/com/ifba/imagens/remover.png.png")),
            new ImageIcon(getClass().getResource("/br/com/ifba/imagens/editar.png.png")),
            curso.getId()
        });
    }

};


    tabCurso.getColumnModel().getColumn(6).setMinWidth(0);
    tabCurso.getColumnModel().getColumn(6).setMaxWidth(0);
    tabCurso.getColumnModel().getColumn(6).setWidth(0);

    // aecoloca os icones nas colunas
    adicionarIconesNasColunas();
    }//GEN-LAST:event_txtButaoActionPerformed

    private void btnNovoCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoCursoActionPerformed
        // TODO add your handling code here:
        CadastrarCurso telaCadastro = new CadastrarCurso(this);
        telaCadastro.setVisible(true);
    }//GEN-LAST:event_btnNovoCursoActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
        String textoBusca = txtBuscar.getText().toLowerCase(); // texto digitado na busca
        DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
            modelo.setRowCount(0); // limpa a tabela

            List<Curso> cursos = controller.listarTodos();

                for (Curso curso : cursos) {
                    if (curso.getNome().toLowerCase().contains(textoBusca) ||
                        curso.getDescricao().toLowerCase().contains(textoBusca) ||
                        curso.getPlataforma().toLowerCase().contains(textoBusca)) {

                            modelo.addRow(new Object[]{
                                curso.getNome(),
                                curso.getDuracao(),
                                curso.getDescricao(),
                                curso.getPlataforma(),
                                null,
                                null,
                                curso.getId()
                                });
    }
}
    }//GEN-LAST:event_txtBuscarActionPerformed

    /**
     * @param linha
     * @param nome
     * @param duracao
     * @param descricao
     * @param plataforma
     */
    
    
    
    // esse metado atualizara a tabela com as novas informacao
    public void atualizarCurso(int linha, String nome, int duracao, String descricao, String plataforma) {
    DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
    modelo.setValueAt(nome, linha, 0);
    modelo.setValueAt(duracao, linha, 1);
    modelo.setValueAt(descricao, linha, 2);
    modelo.setValueAt(plataforma, linha, 3);
    
    // atualiza no banco
    Long id = (Long) modelo.getValueAt(linha, 4); // coluna do ID
    Curso curso = controller.buscarPorId(id);
    curso.setNome(nome);
    curso.setDuracao(duracao);
    curso.setDescricao(descricao);
    curso.setPlataforma(plataforma);

    controller.atualizarCurso(curso);

}
    
    // carregar os dados dos cursos salvos no banco e exibir na tela
    void carregarTabela(){
        List<Curso> cursos = controller.listarTodos(); // pega a lista de cursos usando o contriller
        DefaultTableModel modelo = (DefaultTableModel) tabCurso.getModel();
        modelo.setRowCount(0);
        
        for(Curso curso : cursos){ // adiciona cada curso com uma nova linha na tabela
           modelo.addRow(new Object[]{
            curso.getNome(),
            curso.getDuracao(),
            curso.getDescricao(),
            curso.getPlataforma(),
            null, 
            null, 
            curso.getId() 
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovoCurso;
    private javax.swing.JLabel lblHomemCrem;
    private javax.swing.JPanel painelSuperior;
    private javax.swing.JTable tabCurso;
    private javax.swing.JScrollPane tabelaCurso;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JButton txtButao;
    // End of variables declaration//GEN-END:variables
}
